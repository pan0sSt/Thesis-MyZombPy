#!/usr/bin/env python

import requests
import re
from urllib import parse
from bs4 import BeautifulSoup


def vulnscan_info():
    ignore = []
    target = input('Your target URL: ')
    decision = input('Do you want to ignore any link types[y/n]: ')
    while decision.lower() == 'y':
        ignore.append(input('Link to ignore: '))
        decision = input('Ignore another?[y/n]: ')
    scanner = Scanner(target, ignore)

    decision = input('Do you want to insert login credentials[y/n]: ')
    if decision.lower() == 'y':
        login_url = input('Login URL: ')
        username = input('Username: ')
        password = input('Password: ')
        data_dict = {"username": username, "password": password, "Login": "submit"}
        scanner.session.post(login_url, data=data_dict)
    return scanner


class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.ignore_links = ignore_links

    def extract_links(self, url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content.decode('utf-8'))

    def contains_ignore_link(self, link):
        for word in self.ignore_links:
            if word in link:
                return True
        return False

    def crawl(self, url=None):
        if url is None:
            url = self.target_url
        href_links = self.extract_links(url)
        for link in href_links:
            link = parse.urljoin(url, link)

            if '#' in link:
                link = link.split('#')[0]

            if self.target_url in link and link not in self.target_links and not self.contains_ignore_link(link):
                self.target_links.append(link)
                print(link)
                try:
                    self.crawl(link)
                except UnicodeDecodeError:
                    pass

    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features="lxml")
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        limiter = 0
        action = form.get("action")
        post_url = parse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")
        textarea_list = form.findAll("textarea")
        post_data = {}
        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            input_length = input.get("maxlength")
            if input_type == "text":
                if input_length and int(input_length) < len(value):
                    print("[!!!] FORM input in {} has character limit. Test it manually!".format(url))
                    limiter = 1
                else:
                    input_value = value
                    limiter = 0
            post_data[input_name] = input_value

        for txtarea in textarea_list:
            txtarea_name = txtarea.get("name")
            txtarea_value = value
            post_data[txtarea_name] = txtarea_value
            
        if method == "post":
            return limiter, requests.post(post_url, data=post_data)
        return limiter, self.session.get(post_url, params=post_data)

    def run_scanner(self):
        xss_test_script = []
        payloads = ("'", "')", "';", '"', '")', '";', '`', '`)', '`;', '\\', "%27", "%%2727", "%25%27", "%60", "%5C")
        sql_errors = (r"SQL syntax.*MySQL", r"Warning.*mysql_.*", r"MySQL Query fail.*", r"SQL syntax.*MariaDB server")
        try:
            with open('/root/PycharmProjects/TheBoss/xss', 'r') as xssFile:
                xss_test_script = [script.strip('\n\r') for script in xssFile.readlines()]
            xssFile.close()
        except FileNotFoundError:
            print("[!] XSS file doesn't exist")

        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                select_list = form.findAll("select")
                if select_list:
                    print("[!!!] Select option found in {} .Try changing into input!".format(link))
                for script in xss_test_script:
                    limiter, is_vulnerable = self.test_form(form, link, script)
                    if is_vulnerable:
                        print("[***] XSS FORM vulnerability discovered in " + link + " to " + script)
                        break
                    elif limiter:
                        break
                for payload in payloads:
                    is_vulnerable = self.test_form(form, link, payload, sql_errors)
                    if is_vulnerable:
                        print("[***] SQL FORM vulnerability discovered in " + link)
                        break

            if "=" in link:
                for script in xss_test_script:
                    is_vulnerable = self.test_xss_in_link(link, script)
                    if is_vulnerable:
                        print("[***] XSS LINK vulnerability discovered in " + link + " to " + script)
                        break
                for payload in payloads:
                    is_vulnerable = self.test_sql_inj_in_link(link, payload, sql_errors)
                    if is_vulnerable:
                        print("[***] SQL LINK vulnerability discovered in " + link)
                        break

    def test_form(self, form, url, script, sql_errors=None):
        limiter, response = self.submit_form(form, script, url)
        if sql_errors:
            for error in sql_errors:
                if re.compile(error).search(response.content.decode('utf-8')):
                    return True
            return False
        return limiter, script in response.content.decode('utf-8')

    def test_xss_in_link(self, url, xss_test_script):
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return xss_test_script in response.content.decode('utf-8')

    def test_sql_inj_in_link(self, url, payload, sql_errors):
        vuln_url = url.replace("=", "=" + payload)
        response = self.session.get(vuln_url).content.decode('utf-8')
        for error in sql_errors:
            if re.compile(error).search(response):
                return True
        return False
